generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  charge       Charge?  @relation(fields: [chargeId], references: [id])
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chargeId     String?
}

model User {
  id                       String    @id @default(uuid())
  email                    String    @unique
  emailVerified            DateTime?
  image                    String?
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  hasDownloaded            Boolean   @default(false)
  charge                   Charge?   @relation(fields: [chargeId], references: [id])
  chargeId                 String?   @unique
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  geracoes Gerar[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gerar {
  id        String   @id @default(cuid())
  title     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Charge {
  id             String    @id @default(uuid())
  stripeChargeId String    @unique
  status         String
  amount         Int
  user           User?     @relation
  userId         String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Session        Session[]
}

model PaymentIntent {
  id                    Int      @id @default(autoincrement())
  stripeChargeId        String   @unique
  stripePaymentIntentId String   @unique
  status                String
  amount                Int
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model CheckoutSession {
  id              Int      @id @default(autoincrement())
  stripeSessionId String   @unique
  status          String
  amountTotal     Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Postgres {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  createdAt DateTime @default(now())
}

model Event {
  id        String   @id @default(uuid()) // UUID como identificador
  fullName  String
  email     String   @unique
  createdAt DateTime @default(now())
}

model Credentials {
  id        String   @id @default(uuid())
  fullName  String
  email     String
  createdAt DateTime @default(now())
}

model Image {
  id        String   @id @default(cuid())
  filename  String
  url       String
  fileType  String
  filepath  String   // Verifique se esta propriedade existe
  createdAt DateTime @default(now())
}



